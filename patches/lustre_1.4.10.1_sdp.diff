--- ../lustre-1.4.10.1-ori/./lnet/klnds/socklnd/socklnd_cb.c	2007-01-30 13:07:15.000000000 -0500
+++ ./lnet/klnds/socklnd/socklnd_cb.c	2007-07-17 11:18:21.079941660 -0400
@@ -931,12 +931,14 @@
                 
                 write_unlock_bh (g_lock);
 
+#if 0 // this is screwing up zest routing - pauln 
                 if ((id.pid & LNET_PID_USERFLAG) != 0) {
                         CERROR("Refusing to create a connection to "
                                "userspace process %s\n", libcfs_id2str(id));
                         return -EHOSTUNREACH;
                 }
-                
+#endif                
+
                 if (retry) {
                         CERROR("Can't find peer %s\n", libcfs_id2str(id));
                         return -EHOSTUNREACH;
--- ../lustre-1.4.10.1-ori/./lnet/klnds/socklnd/socklnd_modparams.c	2007-01-22 08:32:21.000000000 -0500
+++ ./lnet/klnds/socklnd/socklnd_modparams.c	2007-07-24 12:54:43.263793874 -0400
@@ -126,6 +126,10 @@
                 "seconds for maximum tcp backoff");
 #endif
 
+static int sdp_conn = 0;
+CFS_MODULE_PARM(sdp_conn, "i", int, 0644,
+                "use sockets direct protocol");
+
 ksock_tunables_t ksocknal_tunables = {
         .ksnd_timeout         = &sock_timeout,
 	.ksnd_credits         = &credits,
@@ -152,5 +156,6 @@
         .ksnd_backoff_init    = &backoff_init,
         .ksnd_backoff_max     = &backoff_max,
 #endif
+        .ksnd_sdp_conn        = &sdp_conn,
 };
 
--- ../lustre-1.4.10.1-ori/./lnet/klnds/socklnd/socklnd_lib-linux.c	2007-01-31 18:38:01.000000000 -0500
+++ ./lnet/klnds/socklnd/socklnd_lib-linux.c	2007-07-24 14:50:27.481030629 -0400
@@ -601,14 +601,19 @@
                 return (rc);
         }
 
-        option = -1;
-        set_fs (KERNEL_DS);
-        rc = sock->ops->setsockopt (sock, SOL_TCP, TCP_LINGER2,
-                                    (char *)&option, sizeof (option));
-        set_fs (oldmm);
-        if (rc != 0) {
-                CERROR ("Can't set SO_LINGER2: %d\n", rc);
-                return (rc);
+        /*
+         * SDP doesn't support this option - pauln 7/24/07
+         */
+        if (!*ksocknal_tunables.ksnd_sdp_conn) { 
+                option = -1;
+                set_fs (KERNEL_DS);
+                rc = sock->ops->setsockopt (sock, SOL_TCP, TCP_LINGER2,
+                                            (char *)&option, sizeof (option));
+                set_fs (oldmm);
+                if (rc != 0) {
+                        CERROR ("Can't set SO_LINGER2: %d\n", rc);
+                        return (rc);
+                }
         }
 
         if (!*ksocknal_tunables.ksnd_nagle) {
@@ -682,7 +687,7 @@
                 return (rc);
         }
 
-        if (!do_keepalive)
+        if (!do_keepalive || *ksocknal_tunables.ksnd_sdp_conn)
                 return (0);
 
         set_fs (KERNEL_DS);
--- ../lustre-1.4.10.1-ori/./lnet/klnds/socklnd/socklnd.h	2007-01-30 13:07:15.000000000 -0500
+++ ./lnet/klnds/socklnd/socklnd.h	2007-07-24 12:55:47.924867953 -0400
@@ -115,6 +115,7 @@
         int              *ksnd_backoff_init;    /* initial TCP backoff */
         int              *ksnd_backoff_max;     /* maximum TCP backoff */
 #endif
+        int              *ksnd_sdp_conn;        /* do some socket direct */
 #if defined(CONFIG_SYSCTL) && !CFS_SYSFS_MODULE_PARM
         cfs_sysctl_table_header_t *ksnd_sysctl;   /* sysctl interface */
 #endif
--- ../lustre-1.4.10.1-ori/./lnet/libcfs/linux/linux-tcpip.c	2007-02-03 21:36:14.000000000 -0500
+++ ./lnet/libcfs/linux/linux-tcpip.c	2007-07-24 15:14:19.966936906 -0400
@@ -33,6 +33,12 @@
 #include <linux/fs.h>
 #endif
 
+#include "sdp_inet.h"
+
+int sdp_conn = 0;
+CFS_MODULE_PARM(sdp_conn, "i", int, 0644,
+                "use sockets direct protocol");
+
 int
 libcfs_sock_ioctl(int cmd, unsigned long arg)
 {
@@ -416,7 +422,11 @@
         /* All errors are fatal except bind failure if the port is in use */
         *fatal = 1;
 
-        rc = sock_create (PF_INET, SOCK_STREAM, 0, &sock);
+        if (!sdp_conn)
+                rc = sock_create (PF_INET, SOCK_STREAM, 0, &sock);
+        else
+                rc = sock_create (AF_INET_SDP, SOCK_STREAM, 0, &sock);
+
         *sockp = sock;
         if (rc != 0) {
                 CERROR ("Can't create socket: %d\n", rc);
@@ -625,6 +635,7 @@
         return 0;
 
  failed:
+        CERROR("accept() failure %d\n", rc);
         sock_release(newsock);
         return rc;
 }
