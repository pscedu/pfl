#!/usr/bin/env perl
# $Id$

use strict;
use warnings;

my @thr;

my @ign = (
	[ qw(LNetEQPoll pscrpc_check_events psc_eqpollthr_main _pscthr_begin) ],
	[ qw(accept libcfs_sock_accept lnet_acceptor psc_usklndthr_begin _pscthr_begin) ],
	[ qw(accept psc_ctlacthr_main _pscthr_begin) ],
	[ qw(cv_wait taskq_thread_wait taskq_thread) ],
	[ qw(poll pscfs_fuse_listener_loop) ],
	[ qw(poll usocklnd_poll_thread psc_usklndthr_begin _pscthr_begin) ],
	[ qw(psc_waitq_waitabs pscrpcthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitrel psc_ctlthr_main) ],
	[ qw(psc_waitq_waitrel pscfs_fuse_listener_loop) ],
	[ qw(pthread_join pscfs_main main) ],
	[ qw(usleep psc_tiosthr_main _pscthr_begin) ],

	# slash
	[ qw(psc_multiwaitcond_waitrel_ts _sl_csvc_waitrel slconnthr_main) ],
	[ qw(psc_waitq_waitabs _lc_get slvr_worker_int slvr_worker _pscthr_begin) ],
	[ qw(psc_waitq_waitrel _lc_get msbmaprathr_main _pscthr_begin) ],
	[ qw(sleep sl_nbrqthr_main _pscthr_begin) ],

	# zest
	[ qw(psc_multiwait_usecs ziothr_workq_proc_one ziothr_main _pscthr_begin) ],
);

sub ign_thr {
	for (my $i = 1; $i < @thr; $i++) {
		IGN: foreach my $ign (@ign) {
			my $j = 0;
			foreach my $frame (@$ign) {
				next IGN unless $i + $j < @thr && $thr[$i + $j] =~
				    /^#\d+\s+0x[a-zA-Z0-9]+\s+in\s+$frame\s/;
				$j++;
			}
			return (1);
		}
	}
	return (0);
}

sub print_thr {
	print @thr unless ign_thr;
	@thr = ();
}

while (<>) {
	print_thr if /^Thread /;
	push @thr, $_;
}

print_thr;
