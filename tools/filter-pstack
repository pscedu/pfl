#!/usr/bin/env perl
# $Id$

use strict;
use warnings;

my @thr;

my $sc = qr/(_.*_)?/;

my @ign = (
	# pfl
	[ "${sc}accept", qw(libcfs_sock_accept lnet_acceptor psc_usklndthr_begin _pscthr_begin) ],
	[ "${sc}accept", qw(psc_ctlacthr_main _pscthr_begin) ],
	[ "${sc}poll", qw(pscfs_fuse_listener_loop) ],
	[ "${sc}poll", qw(usocklnd_poll_thread psc_usklndthr_begin _pscthr_begin) ],
	[ qw(LNetEQPoll pscrpc_check_events psc_eqpollthr_main _pscthr_begin) ],
	[ qw(_psc_waitq_waitrelv pscrpc_nbreapthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitabs pscrpcthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitrel psc_ctlthr_mainloop psc_ctlthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitrel pscfs_fuse_listener_loop) ],
	[ qw(pscrpcthr_waitevent pscrpcthr_main _pscthr_begin) ],
	[ qw(pthread_join pscfs_main main) ],
	[ qw(sched_yield psc_tiosthr_main _pscthr_begin) ],
	[ qw(usleep psc_tiosthr_main _pscthr_begin) ],

	# slash
	[ "${sc}sleep", qw(sl_nbrqthr_main _pscthr_begin) ],
	[ "${sc}sleep", qw(slistatfsthr_main _pscthr_begin) ],
	[ qw(_psc_waitq_waitrelv pjournal_thr_main _pscthr_begin) ],
	[ qw(_psc_waitq_waitrelv slmjreclaimthr_main _pscthr_begin) ],
	[ qw(_sl_csvc_waitrelv slconnthr_main _pscthr_begin) ],
	[ qw(psc_multiwait_usecs slmupschedthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitabs _lc_get slvr_worker_int slvr_worker _pscthr_begin) ],
	[ qw(psc_waitq_waitrel _lc_get msbmaprathr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitrel _lc_get slibmaprlsthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitrel _lc_get slireplpndthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitrel _lc_get slm_worker_main _pscthr_begin) ],
	[ qw(psc_waitq_waitrel _lc_get slmrcmthr_main _pscthr_begin) ],
	[ qw(psc_waitq_waitabs msbmaprlsthr_main _pscthr_begin) ],
	[ qw(usleep pscfs_main slmzfskstatmthr_main _pscthr_begin) ],
	[ qw(msbmflwthr _pscthr_begin) ],
	[ qw(psc_waitq_waitabs msbmapflushthr_main _pscthr_begin) ],
	[ qw(pscrpc_completion_waitrel_s msbmapflushrpcthr_main _pscthr_begin) ],
	[ qw(slmbmaptimeothr_begin _pscthr_begin) ],
	[ qw(slmcohthr_begin _pscthr_begin) ],

	# zest
	[ qw(psc_multiwait_usecs ziothr_workq_proc_one ziothr_main _pscthr_begin) ],

	# zfs
	[ qw(cv_timedwait arc_reclaim_thread) ],
	[ qw(cv_timedwait l2arc_feed_thread) ],
	[ qw(cv_timedwait taskq_thread_wait taskq_d_thread) ],
	[ qw(cv_timedwait txg_thread_wait txg_sync_thread) ],
	[ qw(cv_wait taskq_thread_wait taskq_thread) ],
	[ qw(cv_wait txg_slash2_wait zfs_write fop_write zfsslash2_write_cursor mdsio_write_cursor mds_cursor_thread _pscthr_begin) ],
	[ qw(cv_wait txg_thread_wait txg_quiesce_thread) ],
	[ qw(listener_loop) ],
	[ qw(taskq_thread_wait taskq_thread) ],
	[ qw(umem_update_thread) ],
	[ qw(zfsfuse_ioctl_queue_worker_thread) ],
	[ qw(zio_aio_thread) ],
);

sub ign_thr {
	for (my $i = 1; $i < @thr; $i++) {
		IGN: foreach my $ign (@ign) {
			my $j = 0;
			foreach my $frame (@$ign) {
				next IGN unless $i + $j < @thr && $thr[$i + $j] =~
				    /^#\d+\s+0x[a-fA-F0-9]+\s+in\s+$frame\s/;
				$j++;
			}
			return (1);
		}
	}
	return (0);
}

sub print_thr {
	print @thr unless ign_thr;
	@thr = ();
}

while (<>) {
	print_thr if /^Thread\s+\d+/;
	if (/^Thread\s+\d+/ or /^#\d+\s+0x[a-fA-F0-9]+\s+in\s+/ or
	    $#thr == -1) {
		push @thr, $_;
	} else {
		chomp $thr[$#thr] if $#thr >= 0;
		$thr[$#thr] .= " $_";
	}
}

print_thr;
