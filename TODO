$Id$

general reminders
- watch out for sizeof(type var[0])
- constify RPC replies in clients and requests in servers
- check all bulkserver()'s for free_desc()
- ensure file permissions in code aren't too permissive
- investigate pthread_rwlocks for things like trees and large lists
- watch out for "a - b" in cmp functions overflowing, use CMP() instead
- investigate if our sched_yield() calls are correct
- watch out for structure reinitialization (e.g. LOCK_INIT twice)
   maybe do:
	#define INIT(s)							\
		do {							\
			if (s->magic == MAGIC)				\
				assert(s->field == VALUE);		\
			s->magic = MAGIC;				\
			s->field = VALUE;				\
		while (0)
- remove XXX comments
- keep "make build > /dev/null" clean
- check memset() for bad sizes sizeof(pg) vs. sizeof(*pg): use PFL_ALLOC_OBJ()
- psc_alloc(p, 0, ...) will always return NULL, deal with it
- convert the localmem API to just use __thread, unless __thread isn't
  supported, then convert __thread to the localmem API
- prefer __inline over inline for pre-C99 compatibility
- void *pri data members can be removed on structures to save
  memory, as you can allocate >sizeof(struct) and point the
  private data pointer past
- ensure no mp RPC message bodies are used after a pscrpc_req_finished()
- check -Wuninitialized and others
- no strcpy, strcat, gets, sscanf without bounds
- nbreqset req callbacks run in conjunction with any req interpret reply callbacks.
  this is confusing because the async_args is identical in both callbacks.
- is it safe to pscrpc_request_finished() in an interpret callback??
- ensure psc_free(p, PAF_LOCK, sz) has sz always as size_t
- ensure any void * used as hash table idmemb are uint64_t for 32-bit
- dont access nseen on lc/mlist without a lock

- use psc mem wrappers for:
	malloc
	calloc
	realloc
	free
	strdup
	asprintf
	posix_memalign
	strndup

make
- rename ROOTDIR -> PROJ_BASE
- make spins if no SRCS or SUBDIRS
- setting variables such as CFLAGS on the command line recursively
  propagates all additive assignments in subdirs

- fix cscope: remove the curdir when the parent includes it

pfl
- ctlapi GETTREE?
- pfl: use "psc_/pfl_" prefix and "_mt" (multithread-safe) postfix
- for psclog(), add extensibility mechanism for fmtstr,
  allowing app-specific callbacks (e.g. %r for zest clients)
- add a pscthr_get() check in pscalloc and test
- psclog format specifier: relative log timestamp difference
- investigate proper control socket permissions checks in ctlapi.
  regular users should be able to read some stats but only root users
  should be able to issue exit commands, etc.  TCP sockets should
  inspect remote port to determine "authorization"
- should hash tables be enforced by to n^^2-1 ??
- rename stree to vtree (variable number of children per branch)
- add custom sleep intervals for timerthr API
- fix endianess in RPCs
- add API for PSC mem failure, so we can plug into the memhandling
  paths when asprintf() fails instead of centralizing the logic over
  malloc().
- add struct members to hdrclean.pl
- add a new vlock API:
    (o) agnostic to underlying type (spin, etc.)
    (o) has a flag to mark for processing of critical
	section and wakeup when leaving section and wakes up
	others waiting
- in pscrpc_nbset_add(), try to push the RPC;
  if failure, do a reap(), and try once more
- change return codes in ctlapi to be two constants:

    PSC_CTLRET_OK - continue processing
    PSC_CTLRET_BAIL - drop the connection

  give them obscure values (42,43) and ensure they are returned

  better way: if psc_ctlmsg_send() fails, use setjmp to exit call stack
  return to after ctl loop
- let caller worry about memory for vbitmaps, don't return pointers
- bail if multiwait_addcond() fails, its a mem condition (dynarray)
  that should be remedied by shrinking pools
- when ppm_total is set less than lc_size for !PPMF_AUTO, set
  ppm_max and check this value in other places to eventually
  decrease pool size
- make the timer thread track a global timeval which other threads that
  don't care about sub-second resolution can use to ease syscalls
- consolidate naming conventions for initializers:
	PSC_WAITQ_INIT -> WAITQ_INIT
  which is OK since it isn't a symbol
- mspinlock is not going to work on NUMA, use thruniqid instead of
  int init+pthread_key
- eliminate flags arg to pscthr_init()
- eliminate prt_alive
- in mguard, check the flags in realloc/free match alloc (PAF_LOCK, ALIGN)
- is pcpp the problem with function args mid-wrapping?
- count spinlocks and mutexes held before:
	- waitq (should be holding one)
	- rpc (should be holding none)
- rename MODULES to COMPONENTS
- rename PPMF_NOLOCK -> PPMF_NOMLOCK, PAF_LOCK -> PAF_MLOCK
- add zfs SPA version to slashd ctlparam
- add lnet knob to ctlparam: sdp, lnet_networks
- use the zfs build- framework for build-standalone and build-slash
- print stats on odtable default behavior
- add function call hierarchy to psclog
- memguard LRU + realloc should always allocate new regions and
  PROT_NONE the old ones
- ctl -plog.level=2 makes the system go haywire
- mmap() mprotect()'d memory in memguard
- rename RSX_ALLOCREP to something that doesnt mean 'allocate' and
  RSX_NEWREQ to ALLOC to make alloc grepping easier

development tool
- let wiki changes automatically email zest/slash2-devel@ like svn commits
