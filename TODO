$Id$

general reminders
- watch out for sizeof(type var[0])
- constify RPC replies in clients and requests in servers
- check all bulkserver()'s for free_desc()
- ensure file permissions in code aren't too permissive
- investigate pthread_rwlocks for things like trees and large lists
- watch out for "a - b" in cmp functions overflowing, use CMP() instead
- investigate if our sched_yield() calls are correct
- watch out for lock reinitialization (i.e. LOCK_INIT twice)
- remove XXX comments
- keep "make build > /dev/null" clean
- check memset() for bad sizes sizeof(pg) vs. sizeof(*pg)
- watch for realloc(p, 0) returning NULL being okay
- convert the localmem API to just use __thread, unless __thread isn't
  supported, then convert __thread to the localmem API
- change inline to __inline
- void *pri data members can be removed on structures to save
  memory, as you can allocate >sizeof(struct) and point the
  private data pointer past
- ensure no mp RPC message bodies are used after a pscrpc_req_finished()
- check -Wuninitialized and others
- no strcpy, strcat, gets, sscanf without bounds
- nbreqset req callbacks run in conjunction with any req interpret reply callbacks.
  this is confusing because the async_args is identical in both callbacks.
- is it safe to pscrpc_request_finished() in an interpret callback??

make
- rename ROOTDIR -> PROJ_BASE
- make spins if no SRCS or SUBDIRS
- setting variables such as CFLAGS on the command line recursively
  propagates all additive assignments in subdirs

- fix cscope: remove the curdir when the parent includes it

pfl
- ctlapi GETTREE?
- pfl: use "psc_/pfl_" prefix and "_mt" (multithread-safe) postfix
- for psclog(), add extensibility mechanism for fmtstr,
  allowing app-specific callbacks (e.g. %r for zest clients)
- add a pscthr_get() check in pscalloc and test
- psclog format specifier: timestamp difference
- investigate proper control socket permissions checks in ctlapi.
  regular users should be able to read some stats but only root users
  should be able to issue exit commands, etc.  TCP sockets should
  inspect remote port to determine "authorization"
- should hash tables be enforced by to n^^2-1 ??
- rename stree to vtree (variable number of children per branch)
- add custom sleep intervals for timerthr API
- fix endianess in RPCs
- add API for PSC mem failure, so we can plug into the memhandling
  paths when asprintf() fails instead of centralizing the logic over
  malloc().
- add struct members to hdrclean.pl
- have psc_pool_return() macro NULL out the pointer arg released
- add a new lock API:
    (o) agnostic to underlying type (spin, etc.)
    (o) has a flag to mark for processing of critical
	section and wakeup when leaving section and wakes up
	others waiting
- in pscrpc_nbset_add(), try to push the RPC;
  if failure, do a reap(), and try once more
- change return codes in ctlapi to be two constants:

    PSC_CTLRET_OK - continue processing
    PSC_CTLRET_BAIL - drop the connection

  give them obscure values (42,43) and ensure they are returned
- rename bitflag.h -> bit.h
- let caller worry about memory for vbitmaps, don't return pointers
- bail if multiwait_addcond() fails, its a mem condition (dynarray)
  that should be remedied by shrinking pools
- when ppm_total is set less than lc_size for !PPMF_AUTO, set
  ppm_max and check this value in other places to eventually
  decrease pool size
- make the timer thread track a global timeval which other threads can
  use up to second resolution to ease syscalls
- add relative (to previous log) timestamps to psclog
- do enums in typedump
- consolidate naming conventions for initializers:
	LOCK_INITIALIZER
	DYNARRAY_INIT
	PSC_WAITQ_INIT
- simplify ctlapi return by not having pass an rc.  if write() fails,
  then read() will fail and it will solve itself the same way.
- put lnet copyright on pscrpc files
- add a superstructure for listcache member entry and store the owning
  listguts and sanity check membership on removal
- merge extra header line on ctl displays into columnal view

mem pool|flg|#free|#use|total| %use|  min|   max|th|#grows|#shrnx|#em|#wa
--------+---+-----+----+-----+-----+-----+------+--+------+------+---+---
replwkrq|A--|  256|   0|  256|   0%|  256| <inf>|80|   256|     0|  0|  0
slab    |A--|    0| 128|  128| 100%|   64|   128|80|   128|     0|  0|  0
fcmh    |---|32766|   2|32768|0.01%|    -|     -| -|     -|     -|  0|  0
bmap    |A--|   62|   2|   64|3.12%|   64| <inf>|80|    64|     0|  0|  0


development tool
- let wiki changes automatically email zest/slash2-devel@ like svn commits
