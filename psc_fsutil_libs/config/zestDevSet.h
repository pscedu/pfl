/* $Id: zestDevSet.h 1428 2007-08-13 17:52:05Z yanovich $ */

#if (!defined HAVE_ZEST_DEVSET_INC)
#define HAVE_ZEST_DEVSET_INC 1

#include "zestTypes.h"
#include "disk.h"
#include "zestConfig.h"

/*<<<<<<<<<<  The below prototypes are auto-generated by fillproto */

/* Pointer to parity disk. */
extern
zdisk_t *parityDsk;

/* no comments found for this variable */
extern
znode_t      *zestNodeInfo;

/* no comments found for this variable */
extern
znode_prof_t *zestNodeProfile;

/* no comments found for this variable */
extern
char         *zestHostname;

/**
 * load_dev_set - open each device matched by the profile glob, also
 *	allocates superblock and file des arrays.
 * @z:   zest node structure
 * Returns: 0 on success, -1 on failure
 */
int load_dev_set(znode_t *z);

/**
 * assemble_dev_set - determine if the devices associated with the fd's
 *	and sb's are affiliated with each other and this node.
 * @z:   zest node profile
 * Returns: 0 on success, -1 on failure
 */
int assemble_dev_set(znode_t *z);

/**
 * init_dev_set - used during formatting, initializes superblocks for
 *	each device handled by the specified node configuration.
 * @z:   zest node profile
 * Returns: 0 on success, -1 on failure
 */
int init_dev_set(znode_t *z);

/**
 * get_uuid - return a 64bit uuid val read from urandom, open the device if needed
 * @fd:  open urandom fd, NULL is acceptable too
 * Return:  the uuid
 */
u64 get_uuid(int *fd);

/**
 * get_devs - run glob() to gather the device list.
 * @z: our node configuration
 * Return:  the number of devices found by glob
 */
int get_devs(znode_t *z);

/**
 * query_dev - report device info
 * @dev_fd:  the file des for the device
 */
int query_dev(int dev_fd);

/*<<<<<<<<<<   This is end of the auto-generated output from fillproto. */

#endif
